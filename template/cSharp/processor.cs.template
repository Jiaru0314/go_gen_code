using System.Text;

namespace {{.ProjectName}}.Processor
{

    public class {{.ClassName}}Processor : I{{.ClassName}}Processor
    {
        private const string TableName = "{{.OriginalTableName}}";
        private readonly {{.ClassName}}Repo _{{.Path}}Repo;
        private readonly IHttpContextAccessor _httpContextAccessor;

        public {{.ClassName}}Processor({{.ClassName}}Repo {{.Path}}Repo, IHttpContextAccessor httpContextAccessor)
        {
            _{{.Path}}Repo = {{.Path}}Repo;
            _httpContextAccessor = httpContextAccessor;
        }

        public R_SysResBase Add{{.ClassName}}(T_{{.ClassName}} req)
        {
            var userId = ContextUtils.GetCurrentUserId(_httpContextAccessor);
            var bizId = CommonMethod.GetSeqNo(TableName);
            req.ID = bizId;
            req.CreateTime = DateTime.Now;
            req.CreateBy = userId;
            var addTask = _{{.Path}}Repo.Add(req);
            return addTask.Result > 0 ? R_SysResBase.Success(bizId) : R_SysResBase.Fail("新增{{.TableComment}}失败");
        }

        public R_SysResBase Delete{{.ClassName}}(string bizId)
        {
            // 事务删除
            var delTask = _{{.Path}}Repo.DeleteById(bizId);
            return delTask.Result ? R_SysResBase.Success(bizId) : R_SysResBase.Fail("删除{{.TableComment}}失败");
        }

        public R_SysResBase Update{{.ClassName}}(T_{{.ClassName}} req)
        {
            var userId = ContextUtils.GetCurrentUserId(_httpContextAccessor);
            req.ModifyTime = DateTime.Now;
            req.ModifyBy = userId;
            var updateTask = _{{.Path}}Repo.Update(req);
            return updateTask.Result ? R_SysResBase.Success(req.ID) : R_SysResBase.Fail("修改{{.TableComment}}失败");
        }

        public R_SysResBase List{{.ClassName}}(Query{{.ClassName}}Req req)
        {
            var queryStr = BulidQueryStr(req);
            var list = _{{.Path}}Repo.ListQuerySql(queryStr, null).Result;
            return R_SysResBase.Success(list);
        }

        public R_SysResBase Page{{.ClassName}}(Page{{.ClassName}}Req req)
        {
            var queryStr = BulidQueryStr(req);
            var strBody = string.Format(CommonConst.PageStr,
                queryStr, (req.PageIndex - 1) * req.PageSize, req.PageIndex * req.PageSize);

            var list = _{{.Path}}Repo.ListQuerySql(strBody, null).Result;
            return R_SysResBase.Success(list);
        }

        private string BulidQueryStr(Query{{.ClassName}}Req req)
        {
            var sb = new StringBuilder("SELECT * from {{.OriginalTableName}}");
            // if (!string.IsNullOrEmpty(req.Name))
            // {
            //     sb.Append($" WHERE Name like '%{req.Name}%'");
            // }
            return sb.ToString();
        }
    }
}